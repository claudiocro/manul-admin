{"version":3,"sources":["../src/actions.js"],"names":["manulAdmin","gotoCreate","collectionName","gotoRoute","adminContext","getCreateRoute","name","gotoEdit","_id","getEditRoute","gotoList","getListRoute","listSortToggle","newSortProperty","LocalState","localStateSortProperties","sortProperties","get","oldProperty","s","id","newSortProps","sortAscending","set","listSetSort","listSetFilter","filter","listSetPageProperties","pageProperties","listGotoPage","currentPage","listGotoNextPage","listGotoPreviousPage","update","doc","methods","Alerts","call","handleCallback","props","error","create","destroy","confirmed","window","confirm","downloadCsv","options","export","data","keys","exportAsCsv","filename","importCsv","file","onInsert","onUpdate","onComplete","counter","imported","Set","parse","header","dynamicTyping","complete","forEach","entryUncleaned","index","checkForComplete","add","size","length","entry","unflatten","value"],"mappings":"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","file":"actions.js","sourcesContent":["import Papa from 'papaparse';\nimport _ from 'lodash';\nimport flat from 'flat';\n\nimport FallbackAlerts from './fallback_alerts';\nimport csv from './utils/csv';\nimport routeUtils from './utils/route_utils';\nimport { stateListFilter, stateListSort, statePageProperties } from './utils/local_state_utils';\n\n\nexport default {\n  manulAdmin: {\n    gotoCreate({ adminContext: { gotoRoute } }, collectionName) {\n      gotoRoute(routeUtils.getCreateRoute(collectionName).name);\n    },\n    gotoEdit({ adminContext: { gotoRoute } }, collectionName, _id) {\n      gotoRoute(routeUtils.getEditRoute(collectionName).name, { _id });\n    },\n    gotoList({ adminContext: { gotoRoute } }, collectionName) {\n      gotoRoute(routeUtils.getListRoute(collectionName).name);\n    },\n    // sortProperty is according to react-griddle\n    listSortToggle({ LocalState }, collectionName, newSortProperty) {\n      const localStateSortProperties = stateListSort(collectionName);\n      const sortProperties = LocalState.get(localStateSortProperties) || [];\n      const oldProperty = _.find(sortProperties, s => s.id === newSortProperty.id);\n      let newSortProps = [];\n\n      if (!oldProperty) {\n        newSortProps = [{ ...newSortProperty, sortAscending: true }, ...sortProperties];\n      } else {\n        newSortProps = _.without(sortProperties, oldProperty);\n        if (oldProperty.sortAscending) {\n          newSortProps = [{ ...newSortProperty, sortAscending: false }, ...newSortProps];\n        }\n      }\n      LocalState.set(localStateSortProperties, newSortProps);\n    },\n    listSetSort({ LocalState }, collectionName, sortProperties) {\n      LocalState.set(stateListSort(collectionName), sortProperties);\n    },\n    listSetFilter({ LocalState }, collectionName, filter) {\n      LocalState.set(stateListFilter(collectionName), filter);\n    },\n    listSetPageProperties({ LocalState }, collectionName, pageProperties) {\n      LocalState.set(statePageProperties(collectionName), pageProperties);\n    },\n    listGotoPage({ LocalState }, collectionName, currentPage) {\n      const pageProperties = LocalState.get(statePageProperties(collectionName));\n      LocalState.set(statePageProperties(collectionName), { ...pageProperties, currentPage });\n    },\n    listGotoNextPage({ LocalState }, collectionName) {\n      const pageProperties = LocalState.get(statePageProperties(collectionName));\n      LocalState.set(statePageProperties(\n        collectionName),\n        { ...pageProperties, currentPage: pageProperties.currentPage + 1 },\n      );\n    },\n    listGotoPreviousPage({ LocalState }, collectionName) {\n      const pageProperties = LocalState.get(statePageProperties(collectionName));\n      LocalState.set(statePageProperties(\n        collectionName), { ...pageProperties, currentPage: pageProperties.currentPage - 1 },\n      );\n    },\n    update(\n      { adminContext: { methods, gotoRoute }, Alerts = FallbackAlerts },\n      collectionName, doc,\n    ) {\n      methods[collectionName].update.call(doc,\n        Alerts.handleCallback('admin.update', { props: () => ({ collectionName, doc }) }, (error) => {\n          if (!error) {\n            gotoRoute(routeUtils.getListRoute(collectionName).name);\n          }\n        }),\n    );\n    },\n    create(\n      { adminContext: { methods, gotoRoute }, Alerts = FallbackAlerts },\n      collectionName, doc,\n    ) {\n      methods[collectionName].create.call(doc,\n        Alerts.handleCallback('admin.create', { props: () => ({ collectionName, doc }) }, (error, _id) => {\n          if (!error) {\n            gotoRoute(routeUtils.getEditRoute(collectionName).name, { _id });\n          }\n        }),\n    );\n    },\n    destroy(\n      { adminContext: { methods, gotoRoute }, Alerts = FallbackAlerts },\n      collectionName, _id,\n    ) {\n      /* eslint no-alert: 0*/\n      const confirmed = window.confirm(\"Really destroy? This can't be undone\");\n      if (confirmed) {\n        methods[collectionName].destroy.call({ _id },\n          Alerts.handleCallback('admin.destroy', { props: () => ({ collectionName, _id }) }, (error) => {\n            if (!error) {\n              gotoRoute(routeUtils.getListRoute(collectionName).name);\n            }\n          }),\n      );\n      }\n    },\n    downloadCsv(\n      { adminContext: { methods }, Alerts = FallbackAlerts },\n      collectionName, options,\n    ) {\n      methods[collectionName].export.call({},\n        Alerts.handleCallback('admin.export', { props: () => ({ collectionName }) }, (error, { data, keys }) => {\n          if (!error) {\n            csv.exportAsCsv({ filename: `export_${collectionName}`, data, keys, ...options });\n          }\n        }),\n      );\n    },\n    importCsv(\n      { adminContext: { methods } },\n      { collectionName, file, onInsert = _.noop, onUpdate = _.noop, onComplete = _.noop },\n    ) {\n      let counter = -1;\n      const imported = new Set();\n      Papa.parse(file, {\n        header: true,\n        dynamicTyping: true,\n        complete({ data }) {\n          data.forEach((entryUncleaned) => {\n            counter += 1;\n            const index = counter; // need constant closure copy\n            const checkForComplete = () => {\n              imported.add(index);\n              if (imported.size === data.length) {\n                onComplete();\n              }\n            };\n            // console.log('uncleaned', entryUncleaned);\n            const entry = flat.unflatten(\n              _.omitBy(entryUncleaned, value => value === 'NULL'),\n            );\n            // console.log('cleaned', entry);\n            if (entry._id) {\n              methods[collectionName].update.call(entry, (error) => {\n                onUpdate(index, error, entry);\n                checkForComplete();\n              });\n            } else {\n              delete entry._id; // if falsy\n              methods[collectionName].create.call(entry, (error, _id) => {\n                onInsert(index, error, { _id, ...entry });\n                checkForComplete();\n              });\n            }\n          });\n        },\n      });\n    },\n  },\n};\n"]}