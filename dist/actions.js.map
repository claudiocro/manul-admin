{"version":3,"sources":["../src/actions.js"],"names":["manulAdmin","gotoCreate","collectionName","gotoRoute","adminContext","getCreateRoute","name","gotoEdit","_id","getEditRoute","gotoList","getListRoute","listSortToggle","newSortProperty","LocalState","localStateSortProperties","sortProperties","get","oldProperty","s","id","newSortProps","sortAscending","set","listSetSort","listSetFilter","filter","listSetSearchTerm","searchTerm","listSetPageProperties","pageProperties","listGotoPage","currentPage","listGotoNextPage","listGotoPreviousPage","update","doc","methods","Alerts","onSuccess","call","handleCallback","props","error","create","destroy","confirmed","window","confirm","exportCsv","docs","filename","options","isEmptyObject","field","removeEmptyObjects","transform","data","keysSet","forEach","entry","add","key","keys","values","exportAsCsv","importCsv","file","onInsert","onUpdate","onComplete","counter","imported","parse","header","dynamicTyping","complete","entryUncleaned","index","checkForComplete","size","length","unflatten","value"],"mappings":"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","file":"actions.js","sourcesContent":["import Papa from 'papaparse';\nimport _ from 'lodash';\nimport flat from 'flat';\nimport { flow, find, map } from 'lodash/fp';\nimport FallbackAlerts from './fallback_alerts';\nimport csv from './utils/csv';\nimport routeUtils from './utils/route_utils';\nimport { stateListFilter, stateListSort, statePageProperties, stateListSearch } from './utils/local_state_utils';\n\n\nexport default {\n  manulAdmin: {\n    gotoCreate({ adminContext: { gotoRoute } }, collectionName) {\n      gotoRoute(routeUtils.getCreateRoute(collectionName).name);\n    },\n    gotoEdit({ adminContext: { gotoRoute } }, collectionName, _id) {\n      gotoRoute(routeUtils.getEditRoute(collectionName).name, { _id });\n    },\n    gotoList({ adminContext: { gotoRoute } }, collectionName) {\n      gotoRoute(routeUtils.getListRoute(collectionName).name);\n    },\n    // sortProperty is according to react-griddle\n    listSortToggle({ LocalState }, collectionName, newSortProperty) {\n      const localStateSortProperties = stateListSort(collectionName);\n      const sortProperties = LocalState.get(localStateSortProperties) || [];\n      const oldProperty = find(s => s.id === newSortProperty.id)(sortProperties);\n      let newSortProps = [];\n\n      if (!oldProperty) {\n        newSortProps = [{ ...newSortProperty, sortAscending: true }, ...sortProperties];\n      } else {\n        newSortProps = _.without(sortProperties, oldProperty);\n        if (oldProperty.sortAscending) {\n          newSortProps = [{ ...newSortProperty, sortAscending: false }, ...newSortProps];\n        }\n      }\n      LocalState.set(localStateSortProperties, newSortProps);\n    },\n    listSetSort({ LocalState }, collectionName, sortProperties) {\n      LocalState.set(stateListSort(collectionName), sortProperties);\n    },\n    listSetFilter({ LocalState }, collectionName, filter) {\n      LocalState.set(stateListFilter(collectionName), filter);\n    },\n    listSetSearchTerm({ LocalState }, collectionName, searchTerm) {\n      LocalState.set(stateListSearch(collectionName), searchTerm);\n    },\n    listSetPageProperties({ LocalState }, collectionName, pageProperties) {\n      LocalState.set(statePageProperties(collectionName), pageProperties);\n    },\n    listGotoPage({ LocalState }, collectionName, currentPage) {\n      const pageProperties = LocalState.get(statePageProperties(collectionName));\n      LocalState.set(statePageProperties(collectionName), { ...pageProperties, currentPage });\n    },\n    listGotoNextPage({ LocalState }, collectionName) {\n      const pageProperties = LocalState.get(statePageProperties(collectionName));\n      LocalState.set(statePageProperties(\n        collectionName),\n        { ...pageProperties, currentPage: pageProperties.currentPage + 1 },\n      );\n    },\n    listGotoPreviousPage({ LocalState }, collectionName) {\n      const pageProperties = LocalState.get(statePageProperties(collectionName));\n      LocalState.set(statePageProperties(\n        collectionName), { ...pageProperties, currentPage: pageProperties.currentPage - 1 },\n      );\n    },\n    update(\n      { adminContext: { methods, gotoRoute }, Alerts = FallbackAlerts },\n      collectionName, doc,\n      onSuccess = () => gotoRoute(routeUtils.getListRoute(collectionName).name),\n    ) {\n      methods[collectionName].update.call(doc,\n        Alerts.handleCallback('admin.update', { props: () => ({ collectionName, doc }) }, (error) => {\n          if (!error) {\n            onSuccess({ collectionName, doc, _id: doc._id });\n          }\n        }),\n    );\n    },\n    create(\n      { adminContext: { methods, gotoRoute }, Alerts = FallbackAlerts },\n      collectionName,\n      doc,\n      onSuccess = ({ _id }) => gotoRoute(routeUtils.getEditRoute(collectionName).name, { _id }),\n    ) {\n      methods[collectionName].create.call(doc,\n        Alerts.handleCallback('admin.create', { props: () => ({ collectionName, doc }) }, (error, _id) => {\n          if (!error) {\n            onSuccess({ collectionName, _id });\n          }\n        }),\n    );\n    },\n    destroy(\n      { adminContext: { methods, gotoRoute }, Alerts = FallbackAlerts },\n      collectionName, _id,\n      onSuccess = () => gotoRoute(routeUtils.getListRoute(collectionName).name),\n    ) {\n      /* eslint no-alert: 0*/\n      const confirmed = window.confirm(\"Really destroy? This can't be undone\");\n      if (confirmed) {\n        methods[collectionName].destroy.call({ _id },\n          Alerts.handleCallback('admin.destroy', { props: () => ({ collectionName, _id }) }, (error) => {\n            if (!error) {\n              onSuccess({ collectionName, _id });\n            }\n          }),\n      );\n      }\n    },\n    exportCsv(\n      { adminContext: { methods }, Alerts = FallbackAlerts },\n      docs, { filename = 'export.csv', ...options } = {},\n    ) {\n      const isEmptyObject = (\n        field => _.isObject(field) && !_.isDate(field) && _.isEmpty(field)\n      );\n      const removeEmptyObjects = doc => _.omitBy(doc, isEmptyObject);\n      const transform = flow(\n        map(flat),\n        map(removeEmptyObjects),\n      );\n      const data = transform(docs);\n      const keysSet = new Set();\n      data.forEach(entry => _.keys(entry).forEach(key => keysSet.add(key)));\n      const keys = [...keysSet.values()];\n\n      csv.exportAsCsv({ filename, data, keys, ...options });\n    },\n    importCsv(\n      { adminContext: { methods } },\n      { collectionName, file, onInsert = _.noop, onUpdate = _.noop, onComplete = _.noop },\n    ) {\n      let counter = -1;\n      const imported = new Set();\n      Papa.parse(file, {\n        header: true,\n        dynamicTyping: true,\n        complete({ data }) {\n          data.forEach((entryUncleaned) => {\n            counter += 1;\n            const index = counter; // need constant closure copy\n            const checkForComplete = () => {\n              imported.add(index);\n              if (imported.size === data.length) {\n                onComplete();\n              }\n            };\n            // console.log('uncleaned', entryUncleaned);\n            const entry = flat.unflatten(\n              _.omitBy(entryUncleaned, value => value === 'NULL'),\n            );\n            // console.log('cleaned', entry);\n            if (entry._id) {\n              methods[collectionName].update.call(entry, (error) => {\n                onUpdate(index, error, entry);\n                checkForComplete();\n              });\n            } else {\n              delete entry._id; // if falsy\n              methods[collectionName].create.call(entry, (error, _id) => {\n                onInsert(index, error, { _id, ...entry });\n                checkForComplete();\n              });\n            }\n          });\n        },\n      });\n    },\n  },\n};\n"]}