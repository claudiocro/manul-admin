{"version":3,"sources":["../src/create_methods.js"],"names":[],"mappings":"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","file":"create_methods.js","sourcesContent":["\n\nimport flatten from 'flat';\nimport _ from 'lodash';\nimport IsAllowed from './is_allowed';\n\n\nexport default (context, config) => {\n  const { Meteor, ValidatedMethod } = context;\n  let SimpleSchema;\n  try {\n    /* eslint global-require: 0 */\n    SimpleSchema = require('simpl-schema').default;\n  } catch (error) {\n    // try to get from context\n    SimpleSchema = context.SimpleSchema;\n  }\n  if (!SimpleSchema) {\n    throw new Error('please provide SimpleSchema by npm or in context (version 1)');\n  }\n  const extendSimpleSchema = (schema, otherSchema) => {\n    if (SimpleSchema.version === 2) {\n      return schema.extend(otherSchema);\n    }\n    return new SimpleSchema([schema, otherSchema]);\n  };\n  const isAllowed = IsAllowed(config);\n  const createFor = (collectionName) => {\n    const { collection, allowInsertWithId } = config.collections[collectionName];\n    return {\n      update: new ValidatedMethod({\n        name: `manulAdmin.${collectionName}.update`,\n        validate: extendSimpleSchema(\n          collection.simpleSchema(), { _id: { type: String } },\n        )\n        .validator({ clean: true }),\n        run({ _id, ...doc }) {\n          // console.log('updating', collectionName, _id, doc);\n          if (!isAllowed(collectionName, this.userId)) {\n            throw new Meteor.Error('not allowed', 'You are not allowed');\n          }\n\n          const updated = collection.update(_id, { $set: doc });\n          if (updated === 0) {\n            throw new Meteor.Error('not found', 'Entry not found');\n          }\n        },\n      }),\n      create: new ValidatedMethod({\n        name: `manulAdmin.${collectionName}.create`,\n        validate: (allowInsertWithId ?\n          extendSimpleSchema(collection.simpleSchema(), { _id: { type: String, optional: true } }) :\n          collection.simpleSchema()\n        ).validator({ clean: true }),\n        run(doc) {\n          // console.log('inserting', doc);\n          if (!isAllowed(collectionName, this.userId)) {\n            throw new Meteor.Error('not allowed', 'You are not allowed');\n          }\n          return collection.insert(doc);\n        },\n      }),\n      destroy: new ValidatedMethod({\n        name: `manulAdmin.${collectionName}.destroy`,\n        validate: new SimpleSchema(\n          { _id: { type: String } },\n        ).validator({ clean: true }),\n        run({ _id }) {\n          // console.log('inserting', doc);\n          if (!isAllowed(collectionName, this.userId)) {\n            throw new Meteor.Error('not allowed', 'You are not allowed');\n          }\n          return collection.remove(_id);\n        },\n      }),\n      export: new ValidatedMethod({\n        name: `manulAdmin.${collectionName}.export`,\n        validate() {},\n        run() {\n          if (Meteor.isServer) {\n            // TODO: allow filtering and sorting\n            if (!isAllowed(collectionName, this.userId)) {\n              throw new Meteor.Error('not allowed', 'You are not allowed');\n            }\n\n            // empty objects like {} are preserved by flat, but we like to have them empty (null)\n            const isEmptyObject = (\n              field => _.isObject(field) && !_.isDate(field) && _.isEmpty(field)\n            );\n            const removeEmptyObjects = doc => _.omitBy(doc, isEmptyObject);\n\n            // TODO: use schema to define keys\n\n            const data = collection.find().map(flatten).map(removeEmptyObjects);\n            const keysSet = new Set();\n            data.forEach(entry => _.keys(entry).forEach(key => keysSet.add(key)));\n            return {\n              data, keys: [...keysSet.values()],\n            };\n          }\n          return null;\n        },\n      }),\n\n    };\n  };\n\n  const methods = {\n  };\n  Object.keys(config.collections).forEach((collectionName) => {\n    methods[collectionName] = createFor(collectionName);\n  });\n  return methods;\n};\n"]}