{"version":3,"sources":["../../src/hocs/with_list_documents.js"],"names":["composer","onData","context","publications","collection","collectionName","searchFields","adminContext","Meteor","LocalState","Counts","filter","get","sortProperties","searchTerm","pageProperties","docsLoaded","subscribe","list","ready","query","docs","find","fetch","recordCount","counts"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAGO,IAAMA,8BAAW,SAAXA,QAAW;AAAA,SAAM,gBACyCC,MADzC,EAEzB;AAAA,QADDC,OACC,QADDA,OACC;AAAA,QADQC,YACR,QADQA,YACR;AAAA,QADsBC,UACtB,QADsBA,UACtB;AAAA,QADkCC,cAClC,QADkCA,cAClC;AAAA,QADkDC,YAClD,QADkDA,YAClD;;AAAA,mBACsDJ,SADtD;AAAA,yCACKK,YADL;AAAA,QACqBC,MADrB,yBACqBA,MADrB;AAAA,QAC6BC,UAD7B,yBAC6BA,UAD7B;AAAA,QACyCC,MADzC,yBACyCA,MADzC;;AAEH,QAAMC,SAASF,WAAWG,GAAX,CAAe,wCAAgBP,cAAhB,CAAf,CAAf;AACA,QAAMQ,iBAAiBJ,WAAWG,GAAX,CAAe,sCAAcP,cAAd,CAAf,CAAvB;AACA,QAAMS,aAAaL,WAAWG,GAAX,CAAe,wCAAgBP,cAAhB,CAAf,CAAnB;AACA,QAAMU,iBAAiBN,WAAWG,GAAX,CAAe,4CAAoBP,cAApB,CAAf,CAAvB;AACA,QAAMW,aAAaR,OAAOS,SAAP,CAAiBd,aAAae,IAA9B,EAAoCP,MAApC,EAA4CQ,KAA5C,EAAnB;AACA,QAAMC,QAAQ,gCAAcT,MAAd,EAAsB,EAAEG,sBAAF,EAAcR,0BAAd,EAAtB,CAAd;AACA,QAAMe,OAAOjB,WAAWkB,IAAX,CACXF,KADW,EAEX,4CAA0B,EAAEP,8BAAF,EAAkBE,8BAAlB,EAA1B,CAFW,EAGXQ,KAHW,EAAb;AAIA,QAAMC,cAAcd,OAAOE,GAAP,CAAWT,aAAasB,MAAxB,CAApB;AACAxB,WAAO,IAAP,EACE,EAAEe,sBAAF,EAAcK,UAAd,EAAoBV,cAApB,EAA4BG,sBAA5B,EAAwCD,8BAAxC,EAAwDE,8BAAxD,EAAwES,wBAAxE,EADF;AAGD,GAlBuB;AAAA,CAAjB;;kBAqBQ;AAAA,SAAM,oCAAmBxB,UAAnB,CAAN;AAAA,C","file":"with_list_documents.js","sourcesContent":["\nimport { composeWithTracker } from 'mantra-core';\nimport { filterToQuery, gridOptionsToQueryOptions } from '../utils/query_utils';\nimport { stateListFilter, stateListSort, statePageProperties, stateListSearch } from '../utils/local_state_utils';\n\n\nexport const composer = () => (\n  { context, publications, collection, collectionName, searchFields }, onData,\n) => {\n  const { adminContext: { Meteor, LocalState, Counts } } = context();\n  const filter = LocalState.get(stateListFilter(collectionName));\n  const sortProperties = LocalState.get(stateListSort(collectionName));\n  const searchTerm = LocalState.get(stateListSearch(collectionName));\n  const pageProperties = LocalState.get(statePageProperties(collectionName));\n  const docsLoaded = Meteor.subscribe(publications.list, filter).ready();\n  const query = filterToQuery(filter, { searchTerm, searchFields });\n  const docs = collection.find(\n    query,\n    gridOptionsToQueryOptions({ sortProperties, pageProperties }),\n  ).fetch();\n  const recordCount = Counts.get(publications.counts);\n  onData(null,\n    { docsLoaded, docs, filter, searchTerm, sortProperties, pageProperties, recordCount },\n  );\n};\n\n\nexport default () => composeWithTracker(composer());\n"]}