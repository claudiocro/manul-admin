{"version":3,"sources":["../../src/hocs/with_list_documents.js"],"names":["composer","onData","context","publications","collection","collectionName","adminContext","Meteor","LocalState","Counts","filter","get","sortProperties","pageProperties","docsLoaded","subscribe","list","ready","query","docs","find","fetch","recordCount","counts"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAGO,IAAMA,8BAAW,SAAXA,QAAW;AAAA,SAAM,gBAAwDC,MAAxD,EAAmE;AAAA,QAAhEC,OAAgE,QAAhEA,OAAgE;AAAA,QAAvDC,YAAuD,QAAvDA,YAAuD;AAAA,QAAzCC,UAAyC,QAAzCA,UAAyC;AAAA,QAA7BC,cAA6B,QAA7BA,cAA6B;;AAAA,mBACtCH,SADsC;AAAA,yCACvFI,YADuF;AAAA,QACvEC,MADuE,yBACvEA,MADuE;AAAA,QAC/DC,UAD+D,yBAC/DA,UAD+D;AAAA,QACnDC,MADmD,yBACnDA,MADmD;;AAE/F,QAAMC,SAASF,WAAWG,GAAX,CAAe,wCAAgBN,cAAhB,CAAf,CAAf;AACA,QAAMO,iBAAiBJ,WAAWG,GAAX,CAAe,sCAAcN,cAAd,CAAf,CAAvB;AACA,QAAMQ,iBAAiBL,WAAWG,GAAX,CAAe,4CAAoBN,cAApB,CAAf,CAAvB;AACA,QAAMS,aAAaP,OAAOQ,SAAP,CAAiBZ,aAAaa,IAA9B,EAAoCN,MAApC,EAA4CO,KAA5C,EAAnB;AACA,QAAMC,QAAQ,gCAAcR,MAAd,CAAd;AACA,QAAMS,OAAOf,WAAWgB,IAAX,CACXF,KADW,EAEX,4CAA0B,EAAEN,8BAAF,EAAkBC,8BAAlB,EAA1B,CAFW,EAGXQ,KAHW,EAAb;AAIA,QAAMC,cAAcb,OAAOE,GAAP,CAAWR,aAAaoB,MAAxB,CAApB;AACAtB,WAAO,IAAP,EAAa,EAAEa,sBAAF,EAAcK,UAAd,EAAoBT,cAApB,EAA4BE,8BAA5B,EAA4CC,8BAA5C,EAA4DS,wBAA5D,EAAb;AACD,GAbuB;AAAA,CAAjB;;kBAgBQ;AAAA,SAAM,oCAAmBtB,UAAnB,CAAN;AAAA,C","file":"with_list_documents.js","sourcesContent":["\nimport { composeWithTracker } from 'mantra-core';\nimport { filterToQuery, gridOptionsToQueryOptions } from '../utils/query_utils';\nimport { stateListFilter, stateListSort, statePageProperties } from '../utils/local_state_utils';\n\n\nexport const composer = () => ({ context, publications, collection, collectionName }, onData) => {\n  const { adminContext: { Meteor, LocalState, Counts } } = context();\n  const filter = LocalState.get(stateListFilter(collectionName));\n  const sortProperties = LocalState.get(stateListSort(collectionName));\n  const pageProperties = LocalState.get(statePageProperties(collectionName));\n  const docsLoaded = Meteor.subscribe(publications.list, filter).ready();\n  const query = filterToQuery(filter);\n  const docs = collection.find(\n    query,\n    gridOptionsToQueryOptions({ sortProperties, pageProperties }),\n  ).fetch();\n  const recordCount = Counts.get(publications.counts);\n  onData(null, { docsLoaded, docs, filter, sortProperties, pageProperties, recordCount });\n};\n\n\nexport default () => composeWithTracker(composer());\n"]}