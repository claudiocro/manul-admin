{"version":3,"sources":["../../src/hocs/with_list_documents.js"],"names":["composer","onData","context","publications","collection","collectionName","searchFields","sortCursor","adminContext","Meteor","LocalState","Counts","filter","get","sortProperties","searchTerm","pageProperties","docsLoaded","subscribe","list","ready","query","docs","find","fetch","recordCount","counts"],"mappings":";;;;;;;;;;;AACA;;AACA;;AACA;;;;AAGO,IAAMA,8BAAW,SAAXA,QAAW;AAAA,SAAM,gBAC6DC,MAD7D,EAEzB;AAAA,QADDC,OACC,QADDA,OACC;AAAA,QADQC,YACR,QADQA,YACR;AAAA,QADsBC,UACtB,QADsBA,UACtB;AAAA,QADkCC,cAClC,QADkCA,cAClC;AAAA,QADkDC,YAClD,QADkDA,YAClD;AAAA,+BADgEC,UAChE;AAAA,QADgEA,UAChE,mCAD6E,KAC7E;;AAAA,mBACsDL,SADtD;AAAA,yCACKM,YADL;AAAA,QACqBC,MADrB,yBACqBA,MADrB;AAAA,QAC6BC,UAD7B,yBAC6BA,UAD7B;AAAA,QACyCC,MADzC,yBACyCA,MADzC;;AAEH,QAAMC,SAASF,WAAWG,GAAX,CAAe,wCAAgBR,cAAhB,CAAf,CAAf;AACA,QAAMS,iBAAiBJ,WAAWG,GAAX,CAAe,sCAAcR,cAAd,CAAf,CAAvB;AACA,QAAMU,aAAaL,WAAWG,GAAX,CAAe,wCAAgBR,cAAhB,CAAf,CAAnB;AACA,QAAMW,iBAAiBN,WAAWG,GAAX,CAAe,4CAAoBR,cAApB,CAAf,CAAvB;AACA,QAAMY,aAAaR,OAAOS,SAAP,CAAiBf,aAAagB,IAA9B,EAAoCP,MAApC,EAA4CQ,KAA5C,EAAnB;AACA,QAAMC,QAAQ,gCAAcT,MAAd,EAAsB,EAAEG,sBAAF,EAAcT,0BAAd,EAAtB,CAAd;AACA,QAAMgB,OAAOlB,WAAWmB,IAAX,CACXF,KADW,6BAELd,cAAc,4CAA0B,EAAEO,8BAAF,EAAkBE,8BAAlB,EAA1B,CAFT,GAGXQ,KAHW,EAAb;AAIA,QAAMC,cAAcd,OAAOE,GAAP,CAAWV,aAAauB,MAAxB,CAApB;AACAzB,WAAO,IAAP,EACE,EAAEgB,sBAAF,EAAcK,UAAd,EAAoBV,cAApB,EAA4BG,sBAA5B,EAAwCD,8BAAxC,EAAwDE,8BAAxD,EAAwES,wBAAxE,EADF;AAGD,GAlBuB;AAAA,CAAjB;;kBAqBQ;AAAA,SAAM,oCAAmBzB,UAAnB,CAAN;AAAA,C","file":"with_list_documents.js","sourcesContent":["\nimport { composeWithTracker } from 'mantra-core';\nimport { filterToQuery, gridOptionsToQueryOptions } from '../utils/query_utils';\nimport { stateListFilter, stateListSort, statePageProperties, stateListSearch } from '../utils/local_state_utils';\n\n\nexport const composer = () => (\n  { context, publications, collection, collectionName, searchFields, sortCursor = false }, onData,\n) => {\n  const { adminContext: { Meteor, LocalState, Counts } } = context();\n  const filter = LocalState.get(stateListFilter(collectionName));\n  const sortProperties = LocalState.get(stateListSort(collectionName));\n  const searchTerm = LocalState.get(stateListSearch(collectionName));\n  const pageProperties = LocalState.get(statePageProperties(collectionName));\n  const docsLoaded = Meteor.subscribe(publications.list, filter).ready();\n  const query = filterToQuery(filter, { searchTerm, searchFields });\n  const docs = collection.find(\n    query,\n    { ...(sortCursor && gridOptionsToQueryOptions({ sortProperties, pageProperties })) },\n  ).fetch();\n  const recordCount = Counts.get(publications.counts);\n  onData(null,\n    { docsLoaded, docs, filter, searchTerm, sortProperties, pageProperties, recordCount },\n  );\n};\n\n\nexport default () => composeWithTracker(composer());\n"]}