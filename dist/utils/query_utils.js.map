{"version":3,"sources":["../../src/utils/query_utils.js"],"names":[],"mappings":";;;;;;;;;;sBAAc,QAAQ;;;;8BAAoB,kBAAkB;;;;gCAEvC,oBAAoB;;;;iCACnB,qBAAqB;;;;6BACzB,iBAAiB;;;;+BACf,mBAAmB;;;;4BACtB,gBAAgB;;;;AAEjC,IAAM,kBAAkB,GAAG,iCAAO,UAAA,CAAC;SAAI,mCAAS,CAAC,CAAC,IAAI,kCAAQ,CAAC,CAAC;CAAA,CAAC,CAAC;;;AAI3D,IAAM,aAAa,GAAG,SAAhB,aAAa,CAAI,MAAM,EAAK;AACvC,SAAO,CAAC,GAAG,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;;;AAGlC,MAAI,oBAAE,OAAO,CAAC,MAAM,CAAC,EAAE;AACrB,WAAO,EAAE,CAAC;GACX;;AAED,MAAM,KAAK,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC;;AAEzC,SAAO,KAAK,CAAC;CACd,CAAC;;;AAEF,IAAM,oBAAoB,GAAG,+BAC3B,gCAAM,IAAI,CAAC,EACX,oCAAU,UAAC,IAAiB;MAAf,aAAa,GAAf,IAAiB,CAAf,aAAa;SAAQ,aAAa,GAAG,CAAC,GAAG,CAAC,CAAC;CAAC,CAAC,CAC3D,CAAC;;AAEF,IAAM,4BAA4B,GAAG,SAA/B,4BAA4B;oEACJ,EAAE,WAAW,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;;MAA1D,WAAW,SAAX,WAAW;MAAE,QAAQ,SAAR,QAAQ;SACnB;AACJ,SAAK,EAAE,QAAQ;AACf,QAAI,EAAE,CAAC,WAAW,GAAG,CAAC,CAAA,GAAI,QAAQ;GACnC;CAAC,CAAC;AACI,IAAM,yBAAyB,GAAG,SAA5B,yBAAyB,CAAI,KAAkC,EAAK;MAArC,cAAc,GAAhB,KAAkC,CAAhC,cAAc;MAAE,cAAc,GAAhC,KAAkC,CAAhB,cAAc;;;AAExE,MAAM,IAAI,GAAG,oBAAoB,CAAC,cAAc,CAAC,CAAC;;AAElD,MAAM,YAAY,GAAG,4BAA4B,CAAC,cAAc,CAAC,CAAC;AAClE;AACE,QAAI,EAAJ,IAAI;KACD,YAAY,EACf;CACH,CAAC","file":"query_utils.js","sourcesContent":["import _ from 'lodash';import omitBy from 'lodash/fp/omitBy';\n\nimport isObject from 'lodash/fp/isObject';\nimport mapValues from 'lodash/fp/mapValues';\nimport keyBy from 'lodash/fp/keyBy';\nimport isEmpty from 'lodash/fp/isEmpty';\nimport flow from 'lodash/fp/flow';\n\nconst removeEmptyObjects = omitBy(o => isObject(o) && isEmpty(o));\n\n\n/* eslint import/prefer-default-export: 0 */\nexport const filterToQuery = (filter) => {\n  console.log('got filter', filter);\n  // remove empty objects on filter\n\n  if (_.isEmpty(filter)) {\n    return {};\n  }\n\n  const query = removeEmptyObjects(filter);\n  // console.log('query is', query);\n  return query;\n};\n\nconst sortPropsToMongoSort = flow(\n  keyBy('id'),\n  mapValues(({ sortAscending }) => (sortAscending ? 1 : -1)),\n);\n\nconst pagePropertiesToLimitAndSkip = (\n  { currentPage, pageSize } = { currentPage: 1, pageSize: 10 },\n) => ({\n  limit: pageSize,\n  skip: (currentPage - 1) * pageSize,\n});\nexport const gridOptionsToQueryOptions = ({ sortProperties, pageProperties }) => {\n  // console.log('got sortProperties', sortProperties);\n  const sort = sortPropsToMongoSort(sortProperties);\n  // console.log('mongo sort', sort);\n  const limitAndSkip = pagePropertiesToLimitAndSkip(pageProperties);\n  return {\n    sort,\n    ...limitAndSkip,\n  };\n};\n"]}